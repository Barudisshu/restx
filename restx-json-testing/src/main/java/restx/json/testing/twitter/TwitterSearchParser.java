package restx.json.testing.twitter;

import restx.json.JsonParser;
import restx.json.JsonReader;

import java.io.IOException;
import java.io.InputStreamReader;

/**
* TwitterSearch json parser.
 * This class should be generated by an annotation processor.
*/
public class TwitterSearchParser extends JsonParser<TwitterSearch> {
    public static TwitterSearch parse(InputStreamReader reader) throws Exception {
        try (JsonReader r = JsonReader.with(reader)) {
            return new TwitterSearchParser(r).read();
        }
    }

    public TwitterSearchParser(JsonReader reader) {
        super(reader);
    }

    @Override
    protected TwitterSearch newInstance() {
        return new TwitterSearch();
    }

    @Override
    protected void readProperty(String property, TwitterSearch result) throws IOException {
        switch (property) {
            case "results": result.setResults(readObjectArray(new TwitterEntryParser(reader))); break;
            case "since_id": result.setSince_id(readLong()); break;
            case "max_id": result.setMax_id(readLong()); break;
            case "page": result.setPage(readInt()); break;
            case "results_per_page": result.setResults_per_page(readInt()); break;
            case "query": result.setQuery(readString()); break;
            case "refresh_url": result.setRefresh_url(readString()); break;
            case "next_page": result.setNext_page(readString()); break;
            case "completed_in": result.setCompleted_in(readDoublePrimitive()); break;
            default: throw new RuntimeException("unknown property: " + property);
        }
    }
}
