package restx.json.testing.twitter;

import restx.json.JsonParser;
import restx.json.JsonReader;

import java.io.IOException;

/**
 * TwitterEntry json parser.
 * This class should be generated by an annotation processor.
 */
public class TwitterEntryParser extends JsonParser<TwitterEntry> {
    public TwitterEntryParser(JsonReader reader) {
        super(reader);
    }

    @Override
    protected TwitterEntry newInstance() {
        return new TwitterEntry();
    }

    @Override
    protected void readProperty(TwitterEntry result) throws IOException {
        if (reader.current() != '"') {
            throw complain();
        }

        // highly optimized read property version: determine the property with the least number of checks
        // sacrificing error detection.
        reader.readChar();
        if (reader.lookAhead(2) == '"') {
            skipToPropertyValue(2); result.setId(readPrimitveInt()); return;
        } else if (reader.lookAhead(4) == '"') {
            skipToPropertyValue(4); result.setText(readString()); return;
        } else if (reader.lookAhead(6) == '"') {
            skipToPropertyValue(6); result.setTo_user(readString()); return;
        } else if (reader.lookAhead(7) == '"') {
            skipToPropertyValue(7); result.setTo_user(readString()); return;
        } else if (reader.lookAhead(9) == '"') {
            skipToPropertyValue(9); result.setFrom_user(readString()); return;
        } else if (reader.lookAhead(10) == '"') {
            if (reader.current() == 't') {
                skipToPropertyValue(10); result.setTo_user_id(readInteger()); return;
            } else {
                skipToPropertyValue(10); result.setCreated_at(readString()); return;
            }
        } else if (reader.lookAhead(12) == '"') {
            skipToPropertyValue(12); result.setFrom_user_id(readInteger()); return;
        } else if (reader.lookAhead(17) == '"') {
            if (reader.current() == 'i') {
                skipToPropertyValue(17); result.setIso_language_code(readString()); return;
            } else {
                skipToPropertyValue(17); result.setProfile_image_url(readString()); return;
            }
        } else {
            throw complain();
        }
    }

    @Override
    protected void readProperty(String property, TwitterEntry result) throws IOException {
        // unoptimized implementation, not used as long as optimized version is defined
        switch (property) {
            case "id": result.setId(readPrimitveInt()); break;
            case "text": result.setText(readString()); break;
            case "to_user": result.setTo_user(readString()); break;
            case "from_user": result.setFrom_user(readString()); break;
            case "to_user_id": result.setTo_user_id(readInteger()); break;
            case "created_at": result.setCreated_at(readString()); break;
            case "from_user_id": result.setFrom_user_id(readInteger()); break;
            case "iso_language_code": result.setIso_language_code(readString()); break;
            case "profile_image_url": result.setProfile_image_url(readString()); break;
            default:
                throw new RuntimeException();
        }
    }
}
